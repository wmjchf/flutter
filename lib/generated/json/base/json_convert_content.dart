// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import '../../../models/comment_data_entity.dart';
import 'package:flutter_demo/generated/json/comment_data_entity_helper.dart';
import 'package:flutter_demo/models/music_data_entity.dart';
import 'package:flutter_demo/generated/json/music_data_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case CommentDataEntity:
			return commentDataEntityFromJson(data as CommentDataEntity, json) as T;			case CommantDataHotCommants:
			return commantDataHotCommantsFromJson(data as CommantDataHotCommants, json) as T;			case CommentDataHotCommentsUser:
			return commentDataHotCommentsUserFromJson(data as CommentDataHotCommentsUser, json) as T;			case CommentDataHotCommentsUserVipRights:
			return commentDataHotCommentsUserVipRightsFromJson(data as CommentDataHotCommentsUserVipRights, json) as T;			case CommentDataHotCommentsUserVipRightsAssociator:
			return commentDataHotCommentsUserVipRightsAssociatorFromJson(data as CommentDataHotCommentsUserVipRightsAssociator, json) as T;			case CommantDataCommants:
			return commantDataCommantsFromJson(data as CommantDataCommants, json) as T;			case CommentDataCommentsUser:
			return commentDataCommentsUserFromJson(data as CommentDataCommentsUser, json) as T;			case CommentDataCommentsDecoration:
			return commentDataCommentsDecorationFromJson(data as CommentDataCommentsDecoration, json) as T;			case MusicDataEntity:
			return musicDataEntityFromJson(data as MusicDataEntity, json) as T;			case MusicDataResult:
			return musicDataResultFromJson(data as MusicDataResult, json) as T;			case MusicDataResultSong:
			return musicDataResultSongFromJson(data as MusicDataResultSong, json) as T;			case MusicDataResultSongsArtist:
			return musicDataResultSongsArtistFromJson(data as MusicDataResultSongsArtist, json) as T;			case MusicDataResultSongsAlbum:
			return musicDataResultSongsAlbumFromJson(data as MusicDataResultSongsAlbum, json) as T;			case MusicDataResultSongsAlbumArtist:
			return musicDataResultSongsAlbumArtistFromJson(data as MusicDataResultSongsAlbumArtist, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case CommentDataEntity:
			return commentDataEntityToJson(data as CommentDataEntity);			case CommantDataHotCommants:
			return commantDataHotCommantsToJson(data as CommantDataHotCommants);			case CommentDataHotCommentsUser:
			return commentDataHotCommentsUserToJson(data as CommentDataHotCommentsUser);			case CommentDataHotCommentsUserVipRights:
			return commentDataHotCommentsUserVipRightsToJson(data as CommentDataHotCommentsUserVipRights);			case CommentDataHotCommentsUserVipRightsAssociator:
			return commentDataHotCommentsUserVipRightsAssociatorToJson(data as CommentDataHotCommentsUserVipRightsAssociator);			case CommantDataCommants:
			return commantDataCommantsToJson(data as CommantDataCommants);			case CommentDataCommentsUser:
			return commentDataCommentsUserToJson(data as CommentDataCommentsUser);			case CommentDataCommentsDecoration:
			return commentDataCommentsDecorationToJson(data as CommentDataCommentsDecoration);			case MusicDataEntity:
			return musicDataEntityToJson(data as MusicDataEntity);			case MusicDataResult:
			return musicDataResultToJson(data as MusicDataResult);			case MusicDataResultSong:
			return musicDataResultSongToJson(data as MusicDataResultSong);			case MusicDataResultSongsArtist:
			return musicDataResultSongsArtistToJson(data as MusicDataResultSongsArtist);			case MusicDataResultSongsAlbum:
			return musicDataResultSongsAlbumToJson(data as MusicDataResultSongsAlbum);			case MusicDataResultSongsAlbumArtist:
			return musicDataResultSongsAlbumArtistToJson(data as MusicDataResultSongsAlbumArtist);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'CommentDataEntity':
			return CommentDataEntity().fromJson(json);			case 'CommantDataHotCommants':
			return CommantDataHotCommants().fromJson(json);			case 'CommentDataHotCommentsUser':
			return CommentDataHotCommentsUser().fromJson(json);			case 'CommentDataHotCommentsUserVipRights':
			return CommentDataHotCommentsUserVipRights().fromJson(json);			case 'CommentDataHotCommentsUserVipRightsAssociator':
			return CommentDataHotCommentsUserVipRightsAssociator().fromJson(json);			case 'CommantDataCommants':
			return CommantDataCommants().fromJson(json);			case 'CommentDataCommentsUser':
			return CommentDataCommentsUser().fromJson(json);			case 'CommentDataCommentsDecoration':
			return CommentDataCommentsDecoration().fromJson(json);			case 'MusicDataEntity':
			return MusicDataEntity().fromJson(json);			case 'MusicDataResult':
			return MusicDataResult().fromJson(json);			case 'MusicDataResultSong':
			return MusicDataResultSong().fromJson(json);			case 'MusicDataResultSongsArtist':
			return MusicDataResultSongsArtist().fromJson(json);			case 'MusicDataResultSongsAlbum':
			return MusicDataResultSongsAlbum().fromJson(json);			case 'MusicDataResultSongsAlbumArtist':
			return MusicDataResultSongsAlbumArtist().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'CommentDataEntity':
			return List<CommentDataEntity>();			case 'CommantDataHotCommants':
			return List<CommantDataHotCommants>();			case 'CommentDataHotCommentsUser':
			return List<CommentDataHotCommentsUser>();			case 'CommentDataHotCommentsUserVipRights':
			return List<CommentDataHotCommentsUserVipRights>();			case 'CommentDataHotCommentsUserVipRightsAssociator':
			return List<CommentDataHotCommentsUserVipRightsAssociator>();			case 'CommantDataCommants':
			return List<CommantDataCommants>();			case 'CommentDataCommentsUser':
			return List<CommentDataCommentsUser>();			case 'CommentDataCommentsDecoration':
			return List<CommentDataCommentsDecoration>();			case 'MusicDataEntity':
			return List<MusicDataEntity>();			case 'MusicDataResult':
			return List<MusicDataResult>();			case 'MusicDataResultSong':
			return List<MusicDataResultSong>();			case 'MusicDataResultSongsArtist':
			return List<MusicDataResultSongsArtist>();			case 'MusicDataResultSongsAlbum':
			return List<MusicDataResultSongsAlbum>();			case 'MusicDataResultSongsAlbumArtist':
			return List<MusicDataResultSongsAlbumArtist>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}